{"version":3,"file":"mask.cjs.production.min.js","sources":["../src/styles.tsx","../src/Mask.tsx"],"sourcesContent":["import { CSSObject } from '@emotion/react'\n\nexport type StyleFn = (props: StyleFnProps, state?: StyleFnProps) => CSSObject\n\nexport type StyleFnProps = CSSObject &\n  Partial<{\n    x: number\n    y: number\n    windowWidth: number\n    windowHeight: number\n    maskID: string\n    clipID: string\n  }>\n\nexport type Styles = {\n  maskWrapper: StyleFn\n  maskArea: StyleFn\n  maskRect: StyleFn\n  clickArea: StyleFn\n  highlightedArea: StyleFn\n}\n\nexport type StylesObj = Partial<Styles>\n\nexport type StyleKey = keyof Styles\n\n/**\n * @deprecated Use `StyleKey` alias instead.\n */\nexport type StylesKeys = StyleKey\n\nexport const defaultStyles: Styles = {\n  maskWrapper: () => ({\n    opacity: 0.7,\n    left: 0,\n    top: 0,\n    position: 'fixed',\n    zIndex: 99999,\n    pointerEvents: 'none',\n    color: '#000',\n  }),\n  maskArea: ({ x, y, width, height }) => ({\n    x,\n    y,\n    width,\n    height,\n    fill: 'black',\n    rx: 0,\n  }),\n  maskRect: ({ windowWidth, windowHeight, maskID }) => ({\n    x: 0,\n    y: 0,\n    width: windowWidth,\n    height: windowHeight,\n    fill: 'currentColor',\n    mask: `url(#${maskID})`,\n  }),\n  clickArea: ({ windowWidth, windowHeight, clipID }) => ({\n    x: 0,\n    y: 0,\n    width: windowWidth,\n    height: windowHeight,\n    fill: 'currentcolor',\n    pointerEvents: 'auto',\n    clipPath: `url(#${clipID})`,\n  }),\n  highlightedArea: ({ x, y, width, height }) => ({\n    x,\n    y,\n    width,\n    height,\n    pointerEvents: 'auto',\n    fill: 'transparent',\n    display: 'none',\n  }),\n}\n\nexport type getStylesType = (key: StylesKeys, extra?: any) => {}\n\nexport function stylesMatcher(styles: StylesObj) {\n  return (key: StyleKey, state: {}): CSSObject => {\n    const base = defaultStyles[key](state)\n    const custom = styles[key]\n    return custom ? custom(base, state) : base\n  }\n}\n","/** @jsx jsx */\nimport { jsx } from '@emotion/react'\nimport React, { MouseEventHandler } from 'react'\nimport { StylesObj, stylesMatcher } from './styles'\nimport { safe, getWindow, getPadding, RectResult } from '@reactour/utils'\n\nconst Mask: React.FC<MaskProps> = ({\n  padding = 10,\n  onClick,\n  onClickHighlighted,\n  styles = {},\n  sizes,\n  className,\n  highlightedAreaClassName,\n  maskId,\n  clipId,\n}) => {\n  const maskID = maskId || uniqueId('mask__')\n  const clipID = clipId || uniqueId('clip__')\n  const getStyles = stylesMatcher(styles)\n  const [px, py] = getPadding(padding)\n  const { w: windowWidth, h: windowHeight } = getWindow()\n  const width = safe(sizes?.width + px * 2)\n  const height = safe(sizes?.height + py * 2)\n  const top = safe(sizes?.top - py)\n  const left = safe(sizes?.left - px)\n\n  return (\n    <div\n      css={getStyles('maskWrapper', {})}\n      onClick={onClick}\n      className={className}\n    >\n      <svg\n        width={windowWidth}\n        height={windowHeight}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <defs>\n          <mask id={maskID}>\n            <rect\n              x={0}\n              y={0}\n              width={windowWidth}\n              height={windowHeight}\n              fill=\"white\"\n            />\n            <rect\n              css={getStyles('maskArea', {\n                x: left,\n                y: top,\n                width,\n                height,\n              })}\n            />\n          </mask>\n          <clipPath id={clipID}>\n            <polygon\n              points={`0 0, 0 ${windowHeight}, ${left} ${windowHeight}, ${left} ${top}, ${left +\n                width} ${top}, ${left + width} ${top + height}, ${left} ${top +\n                height}, ${left} ${windowHeight}, ${windowWidth} ${windowHeight}, ${windowWidth} 0`}\n            />\n          </clipPath>\n        </defs>\n\n        {/* The actual Mask */}\n        <rect\n          css={getStyles('maskRect', {\n            windowWidth,\n            windowHeight,\n            maskID,\n          })}\n        />\n        {/* The clickable area */}\n        <rect\n          css={getStyles('clickArea', {\n            windowWidth,\n            windowHeight,\n            top,\n            left,\n            width,\n            height,\n            clipID,\n          })}\n        />\n        <rect\n          css={getStyles('highlightedArea', {\n            x: left,\n            y: top,\n            width,\n            height,\n          })}\n          className={highlightedAreaClassName}\n          onClick={onClickHighlighted}\n        />\n      </svg>\n    </div>\n  )\n}\n\nexport type MaskProps = {\n  children?: React.ReactNode\n  sizes: RectResult\n  styles?: StylesObj\n  className?: string\n  highlightedAreaClassName?: string\n  padding?: number | [number, number]\n  onClick?: MouseEventHandler<HTMLDivElement>\n  onClickHighlighted?: MouseEventHandler<SVGRectElement>\n  maskId?: string\n  clipId?: string\n}\n\nexport default Mask\n\nfunction uniqueId(prefix: string) {\n  return (\n    prefix +\n    Math.random()\n      .toString(36)\n      .substring(2, 16)\n  )\n}\n"],"names":["defaultStyles","maskWrapper","opacity","left","top","position","zIndex","pointerEvents","color","maskArea","x","y","width","height","fill","rx","maskRect","windowWidth","windowHeight","mask","maskID","clickArea","clipPath","clipID","highlightedArea","display","Mask","padding","onClick","onClickHighlighted","styles","sizes","className","highlightedAreaClassName","clipId","maskId","uniqueId","getStyles","key","state","base","custom","stylesMatcher","getPadding","px","py","getWindow","w","h","safe","jsx","css","xmlns","id","points","prefix","Math","random","toString","substring"],"mappings":"iIA+BaA,EAAwB,CACnCC,YAAa,iBAAO,CAClBC,QAAS,GACTC,KAAM,EACNC,IAAK,EACLC,SAAU,QACVC,OAAQ,MACRC,cAAe,OACfC,MAAO,SAETC,SAAU,kBAA8B,CACtCC,IADWA,EAEXC,IAFcA,EAGdC,QAHiBA,MAIjBC,SAJwBA,OAKxBC,KAAM,QACNC,GAAI,IAENC,SAAU,kBAA4C,CACpDN,EAAG,EACHC,EAAG,EACHC,QAHWK,YAIXJ,SAJwBK,aAKxBJ,KAAM,eACNK,eANsCC,aAQxCC,UAAW,kBAA4C,CACrDX,EAAG,EACHC,EAAG,EACHC,QAHYK,YAIZJ,SAJyBK,aAKzBJ,KAAM,eACNP,cAAe,OACfe,mBAPuCC,aASzCC,gBAAiB,kBAA8B,CAC7Cd,IADkBA,EAElBC,IAFqBA,EAGrBC,QAHwBA,MAIxBC,SAJ+BA,OAK/BN,cAAe,OACfO,KAAM,cACNW,QAAS,UCnEPC,EAA4B,oBAChCC,QAAAA,aAAU,KACVC,IAAAA,QACAC,IAAAA,uBACAC,OAAAA,aAAS,KACTC,IAAAA,MACAC,IAAAA,UACAC,IAAAA,yBAEAC,IAAAA,OAEMd,IAHNe,QAGyBC,EAAS,UAC5Bb,EAASW,GAAUE,EAAS,UAC5BC,WD4DsBP,UACrB,SAACQ,EAAeC,OACfC,EAAOxC,EAAcsC,GAAKC,GAC1BE,EAASX,EAAOQ,UACfG,EAASA,EAAOD,EAAMD,GAASC,GChEtBE,CAAcZ,KACfa,aAAWhB,GAArBiB,OAAIC,SACiCC,cAAjC7B,IAAH8B,EAAmB7B,IAAH8B,EAClBpC,EAAQqC,cAAKlB,SAAAA,EAAOnB,OAAa,EAALgC,GAC5B/B,EAASoC,cAAKlB,SAAAA,EAAOlB,QAAc,EAALgC,GAC9BzC,EAAM6C,cAAKlB,SAAAA,EAAO3B,KAAMyC,GACxB1C,EAAO8C,cAAKlB,SAAAA,EAAO5B,MAAOyC,UAG9BM,aACEC,IAAKd,EAAU,cAAe,IAC9BT,QAASA,EACTI,UAAWA,GAEXkB,aACEtC,MAAOK,EACPJ,OAAQK,EACRkC,MAAM,8BAENF,kBACEA,cAAMG,GAAIjC,GACR8B,cACExC,EAAG,EACHC,EAAG,EACHC,MAAOK,EACPJ,OAAQK,EACRJ,KAAK,UAEPoC,cACEC,IAAKd,EAAU,WAAY,CACzB3B,EAAGP,EACHQ,EAAGP,EACHQ,MAAAA,EACAC,OAAAA,OAINqC,kBAAUG,GAAI9B,GACZ2B,iBACEI,iBAAkBpC,OAAiBf,MAAQe,OAAiBf,MAAQC,QAAQD,EAC1ES,OAASR,QAAQD,EAAOS,QAASR,EAAMS,QAAWV,OAAQC,EAC1DS,QAAWV,MAAQe,OAAiBD,MAAeC,OAAiBD,WAM5EiC,cACEC,IAAKd,EAAU,WAAY,CACzBpB,YAAAA,EACAC,aAAAA,EACAE,OAAAA,MAIJ8B,cACEC,IAAKd,EAAU,YAAa,CAC1BpB,YAAAA,EACAC,aAAAA,EACAd,IAAAA,EACAD,KAAAA,EACAS,MAAAA,EACAC,OAAAA,EACAU,OAAAA,MAGJ2B,cACEC,IAAKd,EAAU,kBAAmB,CAChC3B,EAAGP,EACHQ,EAAGP,EACHQ,MAAAA,EACAC,OAAAA,IAEFmB,UAAWC,EACXL,QAASC,OAsBnB,SAASO,EAASmB,UAEdA,EACAC,KAAKC,SACFC,SAAS,IACTC,UAAU,EAAG"}