import { jsx } from '@emotion/react';
import { getPadding, getWindow, safe } from '@reactour/utils';

var defaultStyles = {
  maskWrapper: function maskWrapper() {
    return {
      opacity: 0.7,
      left: 0,
      top: 0,
      position: 'fixed',
      zIndex: 99999,
      pointerEvents: 'none',
      color: '#000'
    };
  },
  maskArea: function maskArea(_ref) {
    var x = _ref.x,
        y = _ref.y,
        width = _ref.width,
        height = _ref.height;
    return {
      x: x,
      y: y,
      width: width,
      height: height,
      fill: 'black',
      rx: 0
    };
  },
  maskRect: function maskRect(_ref2) {
    var windowWidth = _ref2.windowWidth,
        windowHeight = _ref2.windowHeight,
        maskID = _ref2.maskID;
    return {
      x: 0,
      y: 0,
      width: windowWidth,
      height: windowHeight,
      fill: 'currentColor',
      mask: "url(#" + maskID + ")"
    };
  },
  clickArea: function clickArea(_ref3) {
    var windowWidth = _ref3.windowWidth,
        windowHeight = _ref3.windowHeight,
        clipID = _ref3.clipID;
    return {
      x: 0,
      y: 0,
      width: windowWidth,
      height: windowHeight,
      fill: 'currentcolor',
      pointerEvents: 'auto',
      clipPath: "url(#" + clipID + ")"
    };
  },
  highlightedArea: function highlightedArea(_ref4) {
    var x = _ref4.x,
        y = _ref4.y,
        width = _ref4.width,
        height = _ref4.height;
    return {
      x: x,
      y: y,
      width: width,
      height: height,
      pointerEvents: 'auto',
      fill: 'transparent',
      display: 'none'
    };
  }
};
function stylesMatcher(styles) {
  return function (key, state) {
    var base = defaultStyles[key](state);
    var custom = styles[key];
    return custom ? custom(base, state) : base;
  };
}

/** @jsx jsx */

var Mask = function Mask(_ref) {
  var _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? 10 : _ref$padding,
      onClick = _ref.onClick,
      onClickHighlighted = _ref.onClickHighlighted,
      _ref$styles = _ref.styles,
      styles = _ref$styles === void 0 ? {} : _ref$styles,
      sizes = _ref.sizes,
      className = _ref.className,
      highlightedAreaClassName = _ref.highlightedAreaClassName,
      maskId = _ref.maskId,
      clipId = _ref.clipId;
  var maskID = maskId || uniqueId('mask__');
  var clipID = clipId || uniqueId('clip__');
  var getStyles = stylesMatcher(styles);

  var _getPadding = getPadding(padding),
      px = _getPadding[0],
      py = _getPadding[1];

  var _getWindow = getWindow(),
      windowWidth = _getWindow.w,
      windowHeight = _getWindow.h;

  var width = safe((sizes == null ? void 0 : sizes.width) + px * 2);
  var height = safe((sizes == null ? void 0 : sizes.height) + py * 2);
  var top = safe((sizes == null ? void 0 : sizes.top) - py);
  var left = safe((sizes == null ? void 0 : sizes.left) - px);
  return jsx("div", {
    css: getStyles('maskWrapper', {}),
    onClick: onClick,
    className: className
  }, jsx("svg", {
    width: windowWidth,
    height: windowHeight,
    xmlns: "http://www.w3.org/2000/svg"
  }, jsx("defs", null, jsx("mask", {
    id: maskID
  }, jsx("rect", {
    x: 0,
    y: 0,
    width: windowWidth,
    height: windowHeight,
    fill: "white"
  }), jsx("rect", {
    css: getStyles('maskArea', {
      x: left,
      y: top,
      width: width,
      height: height
    })
  })), jsx("clipPath", {
    id: clipID
  }, jsx("polygon", {
    points: "0 0, 0 " + windowHeight + ", " + left + " " + windowHeight + ", " + left + " " + top + ", " + (left + width) + " " + top + ", " + (left + width) + " " + (top + height) + ", " + left + " " + (top + height) + ", " + left + " " + windowHeight + ", " + windowWidth + " " + windowHeight + ", " + windowWidth + " 0"
  }))), jsx("rect", {
    css: getStyles('maskRect', {
      windowWidth: windowWidth,
      windowHeight: windowHeight,
      maskID: maskID
    })
  }), jsx("rect", {
    css: getStyles('clickArea', {
      windowWidth: windowWidth,
      windowHeight: windowHeight,
      top: top,
      left: left,
      width: width,
      height: height,
      clipID: clipID
    })
  }), jsx("rect", {
    css: getStyles('highlightedArea', {
      x: left,
      y: top,
      width: width,
      height: height
    }),
    className: highlightedAreaClassName,
    onClick: onClickHighlighted
  })));
};

function uniqueId(prefix) {
  return prefix + Math.random().toString(36).substring(2, 16);
}

export default Mask;
export { Mask };
//# sourceMappingURL=mask.esm.js.map
