{"version":3,"file":"utils.cjs.production.min.js","sources":["../src/useRect.tsx","../src/index.tsx","../src/Observables.tsx","../src/Portal.tsx","../src/smoothScroll.tsx"],"sourcesContent":["import { useEffect, useCallback, useState } from 'react'\n\nexport function getRect<T extends Element>(\n  element?: T | undefined | null\n): RectResult {\n  let rect: RectResult = {\n    bottom: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    width: 0,\n  }\n  if (element) {\n    const domRect: DOMRect = element.getBoundingClientRect()\n    rect = {\n      bottom: domRect.bottom,\n      height: domRect.height,\n      left: domRect.left,\n      right: domRect.right,\n      top: domRect.top,\n      width: domRect.width,\n    }\n  }\n  return rect\n}\n\nexport function useRect<T extends Element>(\n  ref: React.RefObject<T> | undefined,\n  refresher?: any\n): RectResult {\n  const [dimensions, setdDimensions] = useState(initialState)\n  const handleResize = useCallback(() => {\n    if (!ref?.current) return\n    setdDimensions(getRect(ref?.current))\n  }, [ref?.current])\n\n  useEffect(() => {\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [ref?.current, refresher])\n\n  return dimensions\n}\n\nexport function useElemRect(\n  elem: Element | undefined,\n  refresher?: any\n): RectResult {\n  const [dimensions, setdDimensions] = useState(initialState)\n  const handleResize = useCallback(() => {\n    if (!elem) return\n    setdDimensions(getRect(elem))\n  }, [elem])\n\n  useEffect(() => {\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [elem, refresher])\n\n  return dimensions\n}\n\nconst initialState = {\n  bottom: 0,\n  height: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n  width: 0,\n}\n\nexport type RectResult = {\n  bottom: number\n  height: number\n  left: number\n  right: number\n  top: number\n  width: number\n}\n","import Portal from './Portal'\nimport Observables from './Observables'\nimport { useRect, useElemRect, RectResult, getRect } from './useRect'\nimport { smoothScroll } from './smoothScroll'\n\nexport function safe(sum: number): number {\n  return sum < 0 ? 0 : sum\n}\n\nfunction getInViewThreshold(threshold: InViewArgs['threshold']) {\n  if (typeof threshold === 'object' && threshold !== null) {\n    return {\n      thresholdX: threshold.x || 0,\n      thresholdY: threshold.y || 0,\n    }\n  }\n  return {\n    thresholdX: threshold || 0,\n    thresholdY: threshold || 0,\n  }\n}\n\nexport function getWindow(): { w: number; h: number } {\n  const w = Math.max(\n    document.documentElement.clientWidth,\n    window.innerWidth || 0\n  )\n  const h = Math.max(\n    document.documentElement.clientHeight,\n    window.innerHeight || 0\n  )\n  return { w, h }\n}\n\nexport function inView({\n  top,\n  right,\n  bottom,\n  left,\n  threshold,\n}: InViewArgs): boolean {\n  const { w: windowWidth, h: windowHeight } = getWindow()\n  const { thresholdX, thresholdY } = getInViewThreshold(threshold)\n\n  return top < 0 && bottom - top > windowHeight\n    ? true\n    : top >= 0 + thresholdY &&\n        left >= 0 + thresholdX &&\n        bottom <= windowHeight - thresholdY &&\n        right <= windowWidth - thresholdX\n}\n\ntype InViewArgs = RectResult & {\n  threshold?: { x?: number; y?: number } | number\n}\n\nexport const isHoriz = (pos: string) => /(left|right)/.test(pos)\nexport const isOutsideX = (val: number, windowWidth: number): boolean => {\n  return val > windowWidth\n}\nexport const isOutsideY = (val: number, windowHeight: number): boolean => {\n  return val > windowHeight\n}\n\nexport function bestPositionOf(positions: PositionsObjectType): string[] {\n  return Object.keys(positions)\n    .map(p => {\n      return {\n        position: p,\n        value: positions[p],\n      }\n    })\n    .sort((a, b) => b.value - a.value)\n    .map(p => p.position)\n}\n\nconst defaultPadding = 10\n\nexport function getPadding(\n  padding: number | [number, number] = defaultPadding\n) {\n  if (Array.isArray(padding)) {\n    return padding[0]\n      ? [padding[0], padding[1] ? padding[1] : padding[0]]\n      : [defaultPadding, defaultPadding]\n  }\n  return [padding, padding]\n}\n\nexport type PositionsType = 'left' | 'right' | 'top' | 'bottom'\n\nexport type PositionsObjectType = {\n  [position: string]: number\n}\n\nexport type CoordType = number[]\n\nexport type CoordsObjectType = {\n  [position: string]: CoordType\n}\n\nexport {\n  Portal,\n  Observables,\n  useRect,\n  useElemRect,\n  RectResult,\n  getRect,\n  smoothScroll,\n}\n","import React, { useRef, useEffect, useState } from 'react'\nimport useMutationObserver from '@rooks/use-mutation-observer'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nconst Observables: React.FC<ObservablesProps> = ({\n  mutationObservables,\n  resizeObservables,\n  refresh,\n}) => {\n  const [mutationsCounter, setMutationsCounter] = useState(0)\n  const ref = useRef(document.documentElement || document.body)\n\n  function refreshHighlightedRegionIfObservable(nodes: NodeList) {\n    const posibleNodes = Array.from(nodes)\n    for (const node of posibleNodes) {\n      if (mutationObservables) {\n        if (!(node as Element).attributes) {\n          continue\n        }\n        const found = mutationObservables.find((observable: string) =>\n          (node as Element).matches(observable)\n        )\n\n        if (found) {\n          refresh(true)\n        }\n      }\n    }\n  }\n\n  function incrementMutationsCounterIfObservable(nodes: NodeList) {\n    const posibleNodes = Array.from(nodes)\n    for (const node of posibleNodes) {\n      if (resizeObservables) {\n        if (!(node as Element).attributes) {\n          continue\n        }\n        const found = resizeObservables.find((observable: string) =>\n          (node as Element).matches(observable)\n        )\n\n        if (found) setMutationsCounter(mutationsCounter + 1)\n      }\n    }\n  }\n\n  useMutationObserver(\n    ref,\n    (mutationList: MutationRecord[]) => {\n      for (const mutation of mutationList) {\n        if (mutation.addedNodes.length !== 0) {\n          refreshHighlightedRegionIfObservable(mutation.addedNodes)\n          incrementMutationsCounterIfObservable(mutation.addedNodes)\n        }\n\n        if (mutation.removedNodes.length !== 0) {\n          refreshHighlightedRegionIfObservable(mutation.removedNodes)\n          incrementMutationsCounterIfObservable(mutation.removedNodes)\n        }\n      }\n    },\n    { childList: true, subtree: true }\n  )\n\n  useEffect(() => {\n    if (!resizeObservables) {\n      return\n    }\n\n    const resizeObserver: ResizeObserver = new ResizeObserver(() => {\n      refresh()\n    })\n\n    for (const observable of resizeObservables) {\n      const element = document.querySelector(observable)\n      if (element) {\n        resizeObserver.observe(element)\n      }\n    }\n\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [resizeObservables, mutationsCounter])\n\n  return null\n}\n\ntype ObservablesProps = {\n  mutationObservables?: string[]\n  resizeObservables?: string[]\n  refresh?: any\n}\n\nexport default Observables\n","import React, { useLayoutEffect, useState, useRef, ReactChild } from 'react'\nimport { createPortal } from 'react-dom'\n\nconst Portal: React.FC<PortalProps> = ({\n  children,\n  type = 'reactour-portal',\n}) => {\n  let mountNode = useRef<HTMLDivElement | null>(null)\n  let portalNode = useRef<Element | null>(null)\n  let [, forceUpdate] = useState({})\n\n  useLayoutEffect(() => {\n    if (!mountNode.current) return\n\n    const ownerDocument = mountNode.current!.ownerDocument\n    portalNode.current = ownerDocument?.createElement(type)!\n    ownerDocument!.body.appendChild(portalNode.current)\n    forceUpdate({})\n\n    return () => {\n      if (portalNode.current && portalNode.current.ownerDocument) {\n        portalNode.current.ownerDocument.body.removeChild(portalNode.current)\n      }\n    }\n  }, [type])\n\n  return portalNode.current ? (\n    createPortal(children, portalNode.current)\n  ) : (\n    <span ref={mountNode} />\n  )\n}\n\nexport type PortalProps = {\n  children?: ReactChild\n  type?: string\n}\n\nexport default Portal\n","// https://stackoverflow.com/questions/46795955/how-to-know-scroll-to-element-is-done-in-javascript\nexport function smoothScroll(\n  elem: Element | null,\n  options: ScrollIntoViewOptions\n) {\n  return new Promise(resolve => {\n    if (!(elem instanceof Element)) {\n      throw new TypeError('Argument 1 must be an Element')\n    }\n    let same = 0\n    let lastPos: undefined | null | number = null\n    const scrollOptions = Object.assign({ behavior: 'smooth' }, options)\n\n    elem.scrollIntoView(scrollOptions)\n    requestAnimationFrame(check)\n\n    function check() {\n      const newPos = elem?.getBoundingClientRect().top\n      if (newPos === lastPos) {\n        if (same++ > 2) {\n          return resolve(null)\n        }\n      } else {\n        same = 0\n        lastPos = newPos\n      }\n      requestAnimationFrame(check)\n    }\n  })\n}\n"],"names":["getRect","element","rect","bottom","height","left","right","top","width","domRect","getBoundingClientRect","initialState","getWindow","w","Math","max","document","documentElement","clientWidth","window","innerWidth","h","clientHeight","innerHeight","mutationObservables","resizeObservables","refresh","useState","mutationsCounter","setMutationsCounter","ref","useRef","body","refreshHighlightedRegionIfObservable","nodes","posibleNodes","Array","from","node","attributes","find","observable","matches","incrementMutationsCounterIfObservable","useMutationObserver","mutationList","mutation","addedNodes","length","removedNodes","childList","subtree","useEffect","resizeObserver","ResizeObserver","querySelector","observe","disconnect","children","type","mountNode","portalNode","forceUpdate","useLayoutEffect","current","ownerDocument","createElement","appendChild","removeChild","createPortal","React","positions","Object","keys","map","p","position","value","sort","a","b","padding","isArray","threshold","windowWidth","windowHeight","thresholdX","x","thresholdY","y","getInViewThreshold","pos","test","val","sum","elem","options","Promise","resolve","Element","TypeError","same","lastPos","scrollOptions","assign","behavior","scrollIntoView","requestAnimationFrame","check","newPos","refresher","dimensions","setdDimensions","handleResize","useCallback","addEventListener","removeEventListener"],"mappings":"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"}